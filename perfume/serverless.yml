service: shop-reporter

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ${self:custom.deployment.myRegion.${self:custom.deployment.myStage}}
  myProfile: ${self:custom.deployment.myProfile.${self:custom.deployment.myStage}}
  environment:
    tableName: ${self:custom.tableName}
    logLevel: ${self:custom.logLevel.${self:custom.deployment.myStage}}

custom:
  deployment: ${file(config/deployment.yml):deployment}
  tableName: ${self:service}-${self:custom.deployment.myStage}
  logLevel:
    dev: 'DEBUG'
    test: 'INFO'
    prod: 'WARN'

functions:
  getAllPerfume:
    handler: src/getAllPerfume/function.invoke
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}"
    events:
      - http:
          path: perfume
          method: GET

  createPerfume:
    handler: src/createPerfume/function.invoke
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}"
    events:
      - http:
          path: perfume
          method: POST

  getById:
    handler: src/getById/function.invoke
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}"
    events:
      - http:
          path: perfume/{id}
          method: GET

  updatePerfume:
    handler: src/updatePerfume/function.invoke
    events:
      - http:
          path: perfume/{id}
          method: PUT

  removePerfume:
    handler: src/removePerfume/function.invoke
    events:
      - http:
          path: perfume/{id}
          method: DELETE

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: pk # partition key
            AttributeType: S
          - AttributeName: sk # secondary key
            AttributeType: S
        KeySchema: # primary key
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.tableName}